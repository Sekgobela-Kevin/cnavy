string Input_Webpage::getHtmlTag(string html, string tag){
    clog << "getHtmlTag() called" << endl;
    /*std::regex pattern("<" + tag + R"([^<>]*>[\s\S]*</)" + tag + ">", std::regex_constants::icase);
    clog << "getHtmlTag()  pattern created called" << endl;
    std::smatch match;
    clog << "getHtmlTag()  match object created" << endl;
    //this line crashes: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=86164
    std::regex_search (html, match, pattern);
    clog << "getHtmlTag()  regex search finished" << endl;
    */

    // due to problems with regex(stackoverflow)
    // regex is now used to find open and closng tags and then use their position to get tags text

    // set match objects for open tag and closing tag
    std::smatch openTagMatch;
    std::smatch closeTagMatch;

    // also regex pattern for each
    std::regex openTagPattern("<" + tag + R"([^<>]*>)", std::regex_constants::icase);
    std::regex closeTagPattern("</" + tag + ">", std::regex_constants::icase);

    // perform search on earch
    std::regex_search (html, openTagMatch, openTagPattern);
    std::regex_search (html, closeTagMatch, closeTagPattern);

    // get first character index for each from match objects
    int startIndex = openTagMatch.position();
    // tag.length() + 3 is used to offset to end of substring with 3 length of (</>) characters
    int endIndex = closeTagMatch.position() + tag.length() + 3;

    // compute substring using the indexs
    string htmlTagText = html.substr(startIndex, endIndex);

    if(htmlTagText == ""){
        cerr << tag << " tag not found in html" << endl;
        exit(EXIT_FAILURE);
    }
    return htmlTagText;
}

string Input_Webpage::removeHtmlTag(string html, string tag){
    // this regex can cause program termination according to: 
    //    https://gcc.gnu.org/bugzilla/show_bug.cgi?id=86164
    clog << "removeHtmlTag() called" << endl;
    std::regex pattern("<" + tag + R"([^<>]*>[\s\S]*</)" + tag + ">", std::regex_constants::icase);
     clog << "removeHtmlTag()  pattern created called" << endl;
    return std::regex_replace(html, pattern, "");
}

string Input_Webpage::getHtmlTag(string html, string tag){
    /*std::regex pattern("<" + tag + R"([^<>]*>[\s\S]*</)" + tag + ">", std::regex_constants::icase);
    clog << "getHtmlTag()  pattern created called" << endl;
    std::smatch match;
    clog << "getHtmlTag()  match object created" << endl;
    //this line crashes: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=86164
    std::regex_search (html, match, pattern);
    clog << "getHtmlTag()  regex search finished" << endl;
    */

    // due to problems with regex(stackoverflow)
    // regex is now used to find open and closng tags and then use their position to get tags text

    // set match objects for open tag and closing tag
    std::smatch openTagMatch;
    std::smatch closeTagMatch;

    // also regex pattern for each
    std::regex openTagPattern("<" + tag + R"([^<>]*?>)");
    std::regex closeTagPattern("</" + tag + ">");

    // perform search on earch
    std::regex_search (html, openTagMatch, openTagPattern);
    std::regex_search (html, closeTagMatch, closeTagPattern);

    // get first character index for each from match objects
    int startIndex = openTagMatch.position();
    // tag.length() + 3 is used to offset to end of substring with 3 length of (</>) characters
    int endIndex = (closeTagMatch.position() + tag.length() + 3);
    int length = endIndex - startIndex;


    // compute substring using the indexes
    string htmlTagText = html.substr(startIndex, length);

    if(closeTagMatch.length() == 0 && openTagMatch.length() == 0){
        cerr << tag << " tag not found in html" << endl;
    }

    else if (closeTagMatch.length() == 0)
    {
        cerr << "closing tag for " << tag << " not found" << endl;
    }

    else if (openTagMatch.length() == 0)
    {
        cerr << "open tag for " << tag << " not found" << endl;
    }
    
    return htmlTagText;
}


bool Input_Webpage::isHtml(string text){
    // if text is HTML then the original text is different from HTML tags removed
    return removeTags(text) != text;
}
